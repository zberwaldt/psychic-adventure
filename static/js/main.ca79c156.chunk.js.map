{"version":3,"sources":["components/Editor.tsx","components/Previewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editor","onChange","className","spellCheck","e","target","value","DOMPurify","require","Previewer","content","sanitizedHTML","sanitize","id","parse","marked","App","useState","markdown","setMarkdown","html","setHTML","useEffect","transformed","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAceA,EARA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAChB,OACE,qBAAKC,UAAU,SAAf,SACE,0BAAUC,WAAW,QAAQF,SAAU,SAACG,GAAD,OAAOH,EAASG,EAAEC,OAAOC,a,OCPhEC,EAAYC,EAAQ,IAkBXC,EAXG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAEbC,EAAgBJ,EAAUK,SAASF,GAEzC,OACE,qBAAKG,GAAG,UAAUX,UAAU,UAA5B,SACKY,YAAMH,MCZTI,EAASP,EAAQ,IAuBRQ,MArBf,WAAgB,IAAD,EAEmBC,mBAAiB,IAFpC,mBAENC,EAFM,KAEIC,EAFJ,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,KAYb,OAPAC,qBAAU,WACR,IAAIC,EAAcR,EAAOG,GACzBG,EAAQE,KACP,CAACL,IAEJM,QAAQC,IAAIP,GAGV,sBAAKhB,UAAU,MAAf,UACE,wBAAQA,UAAU,eAClB,cAAC,EAAD,CAAQD,SAAUkB,IAClB,cAAC,EAAD,CAAWT,QAAUU,QCPZM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca79c156.chunk.js","sourcesContent":["import React from 'react';\n\ntype EditorProps = {\n  onChange: (...args:any) => any, \n};\n\nconst Editor = ({ onChange }: EditorProps) => {\n  return (\n    <div className=\"editor\">\n      <textarea spellCheck='false' onChange={(e) => onChange(e.target.value)}></textarea>\n    </div>\n  );\n}\n\nexport default Editor;\n","import React from 'react';\nimport parse from 'html-react-parser';\nconst DOMPurify = require('dompurify');\n\n\ntype PreviewerProps = {\n    content?: string\n};\n\nconst Previewer = ({ content }: PreviewerProps) => {\n\n    let sanitizedHTML = DOMPurify.sanitize(content);\n\n  return (\n    <div id=\"preview\" className=\"preview\">\n        {parse(sanitizedHTML)}\n    </div>\n  );\n}\n\nexport default Previewer;\n","import React, { useState, useEffect } from 'react';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\nconst marked = require('marked');\n\nfunction App() {\n\n  const [markdown, setMarkdown] = useState<string>('');\n  const [html, setHTML] = useState('');\n\n  useEffect(() => {\n    let transformed = marked(markdown); \n    setHTML(transformed);   \n  }, [markdown]);\n\n  console.log(markdown);\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <Editor onChange={setMarkdown}/>\n      <Previewer content={ html } />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}