{"version":3,"sources":["components/Editor.tsx","components/Previewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Editor","value","onChange","className","id","spellCheck","e","target","defaultValue","Previewer","content","parsed","parse","marked","require","DOMPurify","setOptions","gfm","xhtml","breaks","App","initialMarkdown","dedent","useState","markdown","setMarkdown","sanitize","html","setHTML","useEffect","transformed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAgBeA,EARA,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SACvB,OACE,qBAAKC,UAAU,SAAf,SACE,0BAAUC,GAAG,SAASC,WAAW,QAAQH,SAAU,SAACI,GAAD,OAAOJ,EAASI,EAAEC,OAAON,QAAQO,aAAeP,O,QCQ1FQ,G,MAZG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAEfC,EAASC,YAAMF,GAEnB,OACE,qBAAKN,GAAG,UAAR,SACIO,M,iBCRFE,EAASC,EAAQ,IACjBC,EAAYD,EAAQ,IAE1BD,EAAOG,WAAW,CAChBC,KAAK,EACLC,OAAO,EACPC,QAAQ,IA+CKC,MA5Cf,WAEE,IAAIC,EAAkBC,IAAH,qmCAFN,EAuBmBC,mBAAiBF,GAvBpC,mBAuBNG,EAvBM,KAuBIC,EAvBJ,OAwBWF,mBAASR,EAAUW,SAASb,EAAOQ,KAxB9C,mBAwBNM,EAxBM,KAwBAC,EAxBA,KA+Bb,OALAC,qBAAU,WACR,IAAIC,EAAcjB,EAAOW,GACzBI,EAAQE,KACP,CAACN,IAGF,sBAAKrB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qDAEF,sBAAKC,GAAG,oBAAR,UACE,cAAC,EAAD,CAAQH,MAAQuB,EAAWtB,SAAUuB,IACrC,cAAC,EAAD,CAAWf,QAAUiB,WCtCdI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a603e82f.chunk.js","sourcesContent":["import React from 'react';\nimport './Editor.css';\n\ntype EditorProps = {\n  value?: string,\n  onChange: (...args:any) => any, \n};\n\nconst Editor = ({ value, onChange }: EditorProps) => {\n  return (\n    <div className=\"editor\">\n      <textarea id=\"editor\" spellCheck='false' onChange={(e) => onChange(e.target.value)} defaultValue={ value } />\n    </div>\n  );\n}\n\nexport default Editor;\n","import React from 'react';\nimport parse from 'html-react-parser';\nimport './Previewer.css';\ntype PreviewerProps = {\n    content?: any\n};\n\nconst Previewer = ({ content }: PreviewerProps) => {\n\n  let parsed = parse(content);\n\n  return (\n    <div id=\"preview\">\n      { parsed }\n    </div>\n  )\n\n}\n\nexport default Previewer;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\nimport dedent from 'dedent-js';\nconst marked = require('marked');\nconst DOMPurify = require('dompurify');\n\nmarked.setOptions({\n  gfm: true,\n  xhtml: true,\n  breaks: true\n});\n\nfunction App() {\n\n  let initialMarkdown = dedent`# Psychic Adventure\n## A Markdown Previewer made with React!\n\n![test](https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fhardboilednews.com%2Fwp-content%2Fuploads%2F2017%2F10%2FPsychic.jpg&f=1&nofb=1)\n\nReasons to try:\n* It's **cool**!\n* It's made in react.\n\nTo learn more check out the [repo](https://github.com/zberwaldt/psychic-adventure)\n\nBehind the scenes Psychic Adventure uses the \\`marked\\` node library\n\\`\\`\\`\n  const test = \"Here is a test code block\"\n\\`\\`\\`\n\n> Psychic Adventure is awesome\n\n- Some Guy, 2021\n`;\n\n  const [markdown, setMarkdown] = useState<string>(initialMarkdown);\n  const [html, setHTML] = useState(DOMPurify.sanitize(marked(initialMarkdown)));\n\n  useEffect(() => {\n    let transformed = marked(markdown); \n    setHTML(transformed);   \n  }, [markdown]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Psychic Adventure</h1>\n      </header>\n      <div id=\"psychic-adventure\">\n        <Editor value={ markdown } onChange={setMarkdown}/>\n        <Previewer content={ html }/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}